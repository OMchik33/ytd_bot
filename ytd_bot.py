# [source: 1]
import os
import asyncio
import logging
import time
import re
import json
import hashlib
from urllib.parse import quote
from pathlib import Path
import datetime # –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

import yt_dlp

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = "–í–°–¢–ê–í–¨–¢–ï–°–Æ–î–ê–¢–û–ö–ï–ù–ë–û–¢–ê" # –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω
ALLOWED_USERS = [–í–ê–®_–¢–ì_ID] # –î–æ–±–∞–≤—å—Ç–µ ID —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
SPECIAL_CODE = "secretcode12345" # –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ
DOWNLOAD_PATH = Path("/download") # –ò—Å–ø–æ–ª—å–∑—É–µ–º Path –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
COOKIES_PATH = Path("/root/ytd/cookies") # –ò—Å–ø–æ–ª—å–∑—É–µ–º Path
DOWNLOAD_BASE_URL = "https://–í–ê–®–î–û–ú–ï–ù.ru/1234567yourrandom" # URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∫–∞—á–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º

# --- –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# --- –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏ ---
DOWNLOAD_PATH.mkdir(parents=True, exist_ok=True)
COOKIES_PATH.mkdir(parents=True, exist_ok=True)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è bot –∏ dispatcher ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è URL ---
# –ö–ª—é—á: message_id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
# –ó–Ω–∞—á–µ–Ω–∏–µ: {'url': str, 'timestamp': datetime}
active_url_requests = {}
REQUEST_TTL = datetime.timedelta(hours=1) # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∑–∞–ø—Ä–æ—Å–∞ (1 —á–∞—Å)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        # [source: 2]
        [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"), KeyboardButton(text="üç™ Cookies")],
        [KeyboardButton(text="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ")] # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
    ],
    resize_keyboard=True,
    persistent=True
)

# --- –•–µ–ª–ø–µ—Ä—ã (get_cookie_file, get_ydl_opts, sanitize_filename) ---
def get_cookie_file(user_id: int) -> Path | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—É–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    cookie_file = COOKIES_PATH / f"cookies_{user_id}.txt"
    return cookie_file if cookie_file.exists() else None

def get_ydl_opts(user_id: int, format_selection: str = None) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –æ–ø—Ü–∏–π –¥–ª—è yt-dlp."""
    opts = {
        # [source: 5]
        'outtmpl': str(DOWNLOAD_PATH / '%(id)s.%(ext)s'), # –ü—É—Ç—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        'quiet': False,
        'nocheckcertificate': True,
        'geo_bypass': True,
        'retries': 5,
        'cookiefile': str(cookie_file) if (cookie_file := get_cookie_file(user_id)) else None,
        'http_headers': {
            # [source: 6]
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36'
        },
        'concurrent_fragment_downloads': 5,
        'fragment_retries': 10,
        'merge_output_format': 'mp4', # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º MP4 –∫–∞–∫ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–ª–∏—è–Ω–∏—è
    }
    if format_selection:
        opts['format'] = f'{format_selection}+ba/b'
    else:
        opts['format'] = 'bestvideo[ext=mp4]+bestaudio/best'
    return opts

def sanitize_filename(title: str) -> str:
    """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
    # [source: 8]
    sanitized = re.sub(r'[<>:"/\\|?*]', '', title)
    sanitized = re.sub(r'\s+', ' ', sanitized).strip()
    max_len = 150
    if len(sanitized) > max_len:
        name_part = sanitized[:max_len].rsplit(' ', 1)[0]
        hash_part = hashlib.md5(title.encode('utf-8')).hexdigest()[:8]
        sanitized = f"{name_part}_{hash_part}"
    return sanitized

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)
    if len(args) > 1 and args[1] == SPECIAL_CODE:
        if user_id not in ALLOWED_USERS:
            ALLOWED_USERS.append(user_id)
            logger.info(f"User {user_id} added via special code.")
            await message.answer("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.")
        else:
            await message.answer("–í—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    if user_id not in ALLOWED_USERS: # [source: 3]
        await message.answer("‚ùå –ö—Ç–æ –≤—ã? –Ø –≤–∞—Å –Ω–µ –∑–Ω–∞—é! –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é.")
        return

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É.", reply_markup=main_keyboard)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ Reply ---
@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def instruction(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"""
    if message.from_user.id not in ALLOWED_USERS: return # [source: 9]
    instruction_text = """
    *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:*

    *‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ* - –ù–∞–∂–º–∏—Ç–µ —ç—Ç—É –∫–Ω–æ–ø–∫—É, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.
      - –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ (480p+), –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤—ã–±—Ä–∞—Ç—å.
      - –ò–Ω–∞—á–µ —Å–∫–∞—á–∞–µ—Ç –≤ –Ω–∞–∏–ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ MP4).
      - –ë—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ "üñºÔ∏è –û–±–ª–æ–∂–∫–∞" –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–µ–≤—å—é.

    *üç™ Cookies* - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –µ—Å–ª–∏ –≤–∏–¥–µ–æ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ [Get cookies.txt LOCALLY](https://chromewebstore.google.com/detail/get-cookiestxt-locally/cclelndahbckbenkjhflpdbgdldlbecc).
    2. –ó–∞–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –Ω—É–∂–Ω–æ–º —Å–∞–π—Ç–µ.
    3. –ù–∞–∂–º–∏—Ç–µ –∏–∫–æ–Ω–∫—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è -> Export (—Ñ–æ—Ä–º–∞—Ç **Netscape**).
    4. –ù–∞–∂–º–∏—Ç–µ "üç™ Cookies" –≤ –±–æ—Ç–µ -> –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `.txt` —Ñ–∞–π–ª.
    5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å–Ω–æ–≤–∞.
    """ # [source: 10] [source: 11] [source: 12] [source: 13]
    await message.answer(instruction_text, parse_mode="Markdown", disable_web_page_preview=True)

@dp.message(F.text == "üç™ Cookies")
async def cookies_prompt(message: types.Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∫—É–∫–∏"""
    if message.from_user.id not in ALLOWED_USERS: return
    cookies_text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª `cookies.txt`, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ Netscape)." # [source: 14]
    await message.answer(cookies_text, parse_mode="Markdown")

@dp.message(F.text == "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ")
async def download_video_prompt(message: types.Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ"""
    if message.from_user.id not in ALLOWED_USERS: return
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É–∫–∏ —Ñ–∞–π–ª–∞ ---
@dp.message(F.document & F.document.file_name.endswith('.txt'))
async def handle_cookie_file(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –∫—É–∫–∏."""
    if message.from_user.id not in ALLOWED_USERS: return
    if not message.document: return

    file_id = message.document.file_id
    file_info = await bot.get_file(file_id)
    file_path_tg = file_info.file_path
    destination = COOKIES_PATH / f"cookies_{message.from_user.id}.txt"

    try:
        await bot.download_file(file_path_tg, destination=str(destination))
        logger.info(f"Cookies file saved for user {message.from_user.id}")
        # [source: 4]
        await message.answer("‚úÖ –ö—É–∫–∏-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É–∫–∏-—Ñ–∞–π–ª.")

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ---
async def download_media(message: types.Message, url: str, user_id: int, format_id: str = None):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª –ø–æ URL —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏."""
    status_msg = await message.answer("‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ...") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
    ydl_opts = get_ydl_opts(user_id, format_selection=format_id)
    download_success = False # –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    info = None # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ

    try:
        # –≠—Ç–∞–ø 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        await status_msg.edit_text("üîÑ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å id –∏ ext
                info = ydl.extract_info(url, download=False)
                file_id = info.get('id', 'unknown_id')
                file_ext = info.get('ext', 'mp4')
                # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
                # –í–∞–∂–Ω–æ: yt-dlp –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏/—Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥—Ä—É–≥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                ydl.params['outtmpl']['default'] = str(DOWNLOAD_PATH / f'{file_id}.%(ext)s')

                # –¢–µ–ø–µ—Ä—å —Å–∫–∞—á–∏–≤–∞–µ–º
                ydl.download([url])
                download_success = True # –û—Ç–º–µ—á–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ

                # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, –Ω—É–∂–Ω–æ —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ, —Ç.–∫. ydl.download –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å info
                # –ò–ª–∏ –Ω–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ ID
                original_id = info.get('id', 'unknown_id')
                temp_file_path = None
                # –ò—â–µ–º —Ñ–∞–π–ª —Å ID –∏ –ª—é–±—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
                found_files = list(DOWNLOAD_PATH.glob(f"{original_id}.*"))
                if found_files:
                    temp_file_path = found_files[0]
                    original_ext = temp_file_path.suffix[1:] # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    logger.info(f"–ù–∞–π–¥–µ–Ω —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file_path}")
                else:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ (–º–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
                    original_ext = info.get('ext', 'mp4')
                    temp_file_path = DOWNLOAD_PATH / f"{original_id}.{original_ext}"
                    logger.warning(f"–°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID '{original_id}', –ø—Ä–æ–±—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {temp_file_path}")


                if not temp_file_path or not temp_file_path.exists():
                    logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ID={original_id}")
                    await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞.")
                    return

            except yt_dlp.utils.DownloadError as e:
                error_message = f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\n`{e}`"
                if "confirm your age" in str(e).lower():
                    error_message += "\n\n‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω–æ, –≤–∏–¥–µ–æ –∏–º–µ–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å Cookies."
                elif "private video" in str(e).lower():
                    error_message += "\n\n‚ÑπÔ∏è –≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã Cookies."
                elif "premiere" in str(e).lower():
                    error_message = "‚ùå –û—à–∏–±–∫–∞: –í–∏–¥–µ–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–º—å–µ—Ä–æ–π –∏ –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."
                elif "unavailable" in str(e).lower():
                    error_message = f"‚ùå –û—à–∏–±–∫–∞: –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ ({e})."
                await status_msg.edit_text(error_message, parse_mode="Markdown")
                return # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ yt-dlp –Ω–∞ —ç—Ç–∞–ø–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è {url}: {e}")
                raise # –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º

        # –≠—Ç–∞–ø 2: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ)
        if download_success and temp_file_path and temp_file_path.exists():
            title = info.get('title', 'video') if info else 'video'
            # –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
            slug = hashlib.md5(title.encode('utf-8') + str(user_id).encode()).hexdigest()[:10]
            timestamp = int(time.time())
            # [source: 7]
            unique_filename = f"{slug}_{timestamp}.{original_ext}"
            final_file_path = DOWNLOAD_PATH / unique_filename

            try:
                temp_file_path.rename(final_file_path)
                logger.info(f"–§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ {final_file_path}")
            except OSError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {temp_file_path} –≤ {final_file_path}: {e}")
                await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.")
                return

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            original_name_for_user = f"{sanitize_filename(title)}.{original_ext}"
            # [source: 8]
            download_url = f"{DOWNLOAD_BASE_URL}/{quote(unique_filename)}?filename={quote(original_name_for_user)}"

            await status_msg.edit_text(
                f"‚úÖ **–ì–æ—Ç–æ–≤–æ!**\n\n"
                f"üé¨ *{title}*\n\n"
                f"üîó [–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª]({download_url})\n\n"
                f"_–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è._",
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
        elif download_success and not temp_file_path:
            logger.error(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ —É—Å–ø–µ—à–Ω—ã–º, –Ω–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è URL {url}")
            await status_msg.edit_text("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except yt_dlp.utils.ExtractorError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è {url}: {e}")
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏.\n`{e}`")
    except yt_dlp.utils.DownloadError as e: # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –µ—â–µ —Ä–∞–∑ (–º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞ —ç—Ç–∞–ø–µ getinfo)
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è yt-dlp (—ç—Ç–∞–ø info) –¥–ª—è {url}: {e}")
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ:\n`{e}`")
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await status_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n`{e}`")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ ---
@dp.message(F.text.regexp(r'https?://\S+'))
async def handle_url(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ."""
    if message.from_user.id not in ALLOWED_USERS: return
    if not message.text: return

    url = message.text
    user_id = message.from_user.id
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º answer, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å message_id –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è URL
    status_msg = await message.answer("üîé –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É...")
    message_id_for_buttons = status_msg.message_id # ID —Å–æ–æ–±—â–µ–Ω–∏—è, –≥–¥–µ –±—É–¥—É—Ç –∫–Ω–æ–ø–∫–∏

    # --- –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ---
    now = datetime.datetime.now(datetime.timezone.utc)
    expired_keys = [
        k for k, v in active_url_requests.items()
        if now - v['timestamp'] > REQUEST_TTL
    ]
    for key in expired_keys:
        active_url_requests.pop(key, None)
    # --- ---

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        ydl_opts_info = get_ydl_opts(user_id)
        ydl_opts_info['skip_download'] = True
        ydl_opts_info['quiet'] = True
        # [source: 16]
        ydl_opts_info['no_warnings'] = True

        with yt_dlp.YoutubeDL(ydl_opts_info) as ydl:
            info = ydl.extract_info(url, download=False)

        formats = info.get('formats', [])
        thumbnail_url = info.get('thumbnail')
        title = info.get('title', '–≤–∏–¥–µ–æ')

        # --- –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ ---
        quality_buttons = []
        unique_qualities = {}

        # [source: 17]
        for f in formats:
            height = f.get('height')
            format_id = f.get('format_id')
            vcodec = f.get('vcodec', 'none')
            acodec = f.get('acodec', 'none')

            if height and height >= 480 and vcodec != 'none' and format_id:
                if acodec != 'none' or f.get('protocol') in ('https', 'http'):
                    quality_label = f"{height}p"
                    if quality_label not in unique_qualities:
                        # [source: 18]
                        unique_qualities[quality_label] = {
                            "format_id": format_id,
                            "height": height
                        }

        sorted_qualities = sorted(unique_qualities.items(), key=lambda item: item[1]['height'], reverse=True)

        # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
        builder = InlineKeyboardBuilder()
        # [source: 19]
        for label, data in sorted_qualities:
            # –£–ö–û–†–û–ß–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï!
            callback_data = json.dumps({
                "a": "d", # action: download
                "f": data['format_id'] # format_id
            })
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã callback_data (Telegram –ª–∏–º–∏—Ç ~64 –±–∞–π—Ç–∞)
            if len(callback_data.encode('utf-8')) <= 64:
                builder.button(text=f"üé¨ {label}", callback_data=callback_data)
            else:
                logger.warning(f"Callback data –¥–ª—è {label} ({data['format_id']}) —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {len(callback_data.encode('utf-8'))} –±–∞–π—Ç. –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")


        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–ª–æ–∂–∫–∏
        if thumbnail_url:
            # –£–ö–û–†–û–ß–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï!
            callback_data_thumb = json.dumps({"a": "t"}) # action: thumbnail
            if len(callback_data_thumb.encode('utf-8')) <= 64:
                builder.button(text="üñºÔ∏è –û–±–ª–æ–∂–∫–∞", callback_data=callback_data_thumb)

        # –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º builder.buttons –≤ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã
        quality_button_count = len(list(builder.buttons)) - (1 if thumbnail_url else 0) # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        if quality_button_count > 0 :
            builder.adjust(2 if quality_button_count > 1 else 1) # –ü–æ 2 –≤ —Ä—è–¥, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ 1


        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ---
        keyboard_markup = builder.as_markup() if builder.buttons else None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–Ω–æ–ø–æ–∫
        active_url_requests[message_id_for_buttons] = {
            'url': url,
            'timestamp': datetime.datetime.now(datetime.timezone.utc)
        }

        if quality_button_count > 1: # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
            await status_msg.edit_text(
                f"–ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: *{title}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:",
                reply_markup=keyboard_markup,
                parse_mode="Markdown"
            )
        elif quality_button_count == 1: # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
            single_format_id = sorted_qualities[0][1]['format_id']
            await status_msg.edit_text(
                f"–ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: *{title}*\n\n–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ >= 480p. –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ.",
                reply_markup=keyboard_markup, # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–ª–æ–∂–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                parse_mode="Markdown"
            )
            # –¢—É—Ç –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º download_media, —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É (–∏–ª–∏ –æ–±–ª–æ–∂–∫—É)
            # –ï—Å–ª–∏ –±—ã —Ö–æ—Ç–µ–ª–∏ —Å–∫–∞—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–æ–º, –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –≤—ã–∑–≤–∞—Ç—å —Ç—É—Ç:
            # active_url_requests.pop(message_id_for_buttons, None) # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ-—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
            # await download_media(message, url, user_id, format_id=single_format_id)
        else: # –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ >= 480p
            await status_msg.edit_text(
                f"–ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: *{title}*\n\n–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ >= 480p. –°–∫–∞—á–∏–≤–∞—é –≤ –Ω–∞–∏–ª—É—á—à–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ.",
                reply_markup=keyboard_markup, # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–ª–æ–∂–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                parse_mode="Markdown"
            )
            # –°–∫–∞—á–∏–≤–∞–µ–º best –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–æ —Å–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º state
            active_url_requests.pop(message_id_for_buttons, None)
            await download_media(message, url, user_id) # –°–∫–∞—á–∏–≤–∞–µ–º best

    except TelegramBadRequest as e:
        # –õ–æ–≤–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –æ—à–∏–±–∫—É –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏
        if "BUTTON_DATA_INVALID" in str(e):
            logger.error(f"–û—à–∏–±–∫–∞ BUTTON_DATA_INVALID –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è URL: {url}. –î–∞–Ω–Ω—ã–µ: {builder.export()}")
            await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (–¥–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.")
            active_url_requests.pop(message_id_for_buttons, None) # –û—á–∏—â–∞–µ–º state
        else:
            logger.exception(f"–û—à–∏–±–∫–∞ Telegram API –≤ handle_url –¥–ª—è {url}: {e}")
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {e}")
    except yt_dlp.utils.ExtractorError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è {url} –≤ handle_url: {e}")
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏.\n`{e}`")
        active_url_requests.pop(message_id_for_buttons, None)
    except yt_dlp.utils.DownloadError as e:
        logger.error(f"–û—à–∏–±–∫–∞ yt-dlp (info extraction) –¥–ª—è {url}: {e}")
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ:\n`{e}`")
        active_url_requests.pop(message_id_for_buttons, None)
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_url –¥–ª—è {url} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await status_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏:\n`{e}`")
        active_url_requests.pop(message_id_for_buttons, None) # –û—á–∏—â–∞–µ–º state –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π Inline –∫–Ω–æ–ø–æ–∫ ---
# [source: 20]
@dp.callback_query(F.data.startswith('{'))
async def handle_callback_query(query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    user_id = query.from_user.id
    if user_id not in ALLOWED_USERS:
        await query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return

    message_id = query.message.message_id
    # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ –Ω–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    request_data = active_url_requests.get(message_id)

    if not request_data:
        await query.answer("‚ùå –ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —É —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await query.message.edit_reply_markup(reply_markup=None)
        except Exception:
            pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        return

    url = request_data['url']
    # –û—á–∏—â–∞–µ–º state –°–†–ê–ó–£ –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    active_url_requests.pop(message_id, None)

    try:
        data = json.loads(query.data)
        action = data.get("a") # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–µ 'a'

        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ª—é–±—É—é –∏–∑ –Ω–∏—Ö
        try:
            await query.message.edit_reply_markup(reply_markup=None)
        except Exception as edit_error:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {edit_error}")


        if action == "d": # download
            format_id = data.get("f") # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–µ 'f'
            if not format_id:
                await query.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ñ–æ—Ä–º–∞—Ç.", show_alert=True)
                return

            await query.answer(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
            await download_media(query.message, url, user_id, format_id=format_id)

        elif action == "t": # thumbnail
            await query.answer("üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –æ–±–ª–æ–∂–∫—É...")
            # –ü–µ—Ä–µ–¥–∞–µ–º query.message —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç –±—ã–ª –≤ —Ç–æ–º –∂–µ —á–∞—Ç–µ
            await send_thumbnail(query.message, url, user_id)

        else:
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ '{action}' –≤ callback_data –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")

    except json.JSONDecodeError:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON –∏–∑ callback_data: {query.data} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        active_url_requests.pop(message_id, None) # –û—á–∏—Å—Ç–∫–∞ state –ø—Ä–∏ –æ—à–∏–±–∫–µ
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ handle_callback_query –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
        # [source: 21]
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.", show_alert=True)
        active_url_requests.pop(message_id, None) # –û—á–∏—Å—Ç–∫–∞ state –ø—Ä–∏ –æ—à–∏–±–∫–µ


# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–ª–æ–∂–∫–∏ ---
async def send_thumbnail(message: types.Message, url: str, user_id: int):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –æ–±–ª–æ–∂–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º status_msg, –æ—Ç–≤–µ—á–∞–µ–º –ø—Ä—è–º–æ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        ydl_opts_info = get_ydl_opts(user_id)
        ydl_opts_info['skip_download'] = True
        ydl_opts_info['quiet'] = True
        ydl_opts_info['no_warnings'] = True

        with yt_dlp.YoutubeDL(ydl_opts_info) as ydl:
            info = ydl.extract_info(url, download=False)

        thumbnail_url = info.get('thumbnail')
        title = info.get('title', 'video')

        if thumbnail_url:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
            await message.answer_photo(
                photo=thumbnail_url,
                caption=f"–û–±–ª–æ–∂–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ:\n*{title}*" if title else "–û–±–ª–æ–∂–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ",
                parse_mode="Markdown"
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±–ª–æ–∂–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏ –¥–ª—è {url}: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–ª–æ–∂–∫—É: {e}")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ/—Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}", exc_info=True)
    finally:
        await bot.session.close()
        logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
