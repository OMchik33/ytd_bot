import os
import asyncio
import logging
import time
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import yt_dlp
import re
from urllib.parse import quote
import hashlib
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "–í–°–¢–ê–í–¨–¢–ï–°–Æ–î–ê–¢–û–ö–ï–ù–ë–û–¢–ê"
ALLOWED_USERS = [–í–ê–®_–¢–ì_ID]
SPECIAL_CODE = "secretcode12345"
DOWNLOAD_PATH = "/download"
COOKIES_PATH = "/root/ytd/cookies"
DOWNLOAD_BASE_URL = "https://–í–ê–®–î–û–ú–ï–ù.ru/1234567yourrandom"

# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏
os.makedirs(DOWNLOAD_PATH, exist_ok=True)
os.makedirs(COOKIES_PATH, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è bot –∏ dispatcher
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
user_modes = {}

# Create keyboard
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"), KeyboardButton(text="Cookies")],
        [KeyboardButton(text="–í–∏–¥–µ–æ"), KeyboardButton(text="YouTube")]
    ],
    resize_keyboard=True,
    persistent=True
)
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    args = message.text.split()[1] if len(message.text.split()) > 1 else ""
    if args == SPECIAL_CODE:
        if message.from_user.id not in ALLOWED_USERS:
            ALLOWED_USERS.append(message.from_user.id)
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –ö—Ç–æ –≤—ã? –Ø –≤–∞—Å –Ω–µ –∑–Ω–∞—é! –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É–∫–∏ —Ñ–∞–π–ª–∞
@dp.message(lambda message: message.document and message.document.file_name.endswith('.txt'))
async def handle_cookie_file(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        return
    try:
        file = await bot.get_file(message.document.file_id)
        file_path = os.path.join(COOKIES_PATH, f"cookies_{message.from_user.id}.txt")
        await bot.download_file(file.file_path, file_path)
        await message.answer("‚úÖ –ö—É–∫–∏ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∑–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–æ—á–∫–∞ —Å –∫—É–∫–∏ —Ñ–∞–π–ª–æ–º: {e}")
        await message.answer("‚ùå –ö—É–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
async def download_media(message: types.Message, url: str, quality: str = None):
    status_message = await message.answer("üîÑ –°–∫–∞—á–∏–≤–∞—é...")
    try:
        ydl_opts = {
            'format': f'{quality}+bestaudio/best' if quality else 'bestvideo+bestaudio/best',
            'outtmpl': os.path.join(DOWNLOAD_PATH, '%(id)s.%(ext)s'),
            'quiet': False,
            'nocheckcertificate': True,
            'geo_bypass': True,
            'retries': 5,
            'cookiefile': os.path.join(COOKIES_PATH, f"cookies_{message.from_user.id}.txt") if os.path.exists(os.path.join(COOKIES_PATH, f"cookies_{message.from_user.id}.txt")) else None,
            'http_headers': {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'
            }
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)

        title = info.get('title', 'video')
        slug = hashlib.md5(title.encode('utf-8')).hexdigest()
        timestamp = int(time.time())
        file_name = f"{slug}_{timestamp}.{info['ext']}"
        file_path = os.path.join(DOWNLOAD_PATH, file_name)

        temp_file_path = os.path.join(DOWNLOAD_PATH, f"{info['id']}.{info['ext']}")
        os.rename(temp_file_path, file_path)
        
        def sanitize_filename(title):
            sanitized = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø0-9\.,!\- _]', '', title)
            sanitized = re.sub(r'\s+', ' ', sanitized).strip()
            return sanitized
            
        original_name = f"{sanitize_filename(title)}.{info['ext']}"
        download_url = f"{DOWNLOAD_BASE_URL}/{quote(file_name)}?filename={quote(original_name)}"

        await status_message.edit_text(f"‚úÖ –ì–û–¢–û–í–û!\n\n*–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏–∫–∞:* `{title}`\n\n–ù–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ 30 –º–∏–Ω—É—Ç\n\n[–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è]({download_url})", parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error: {e}")
        await status_message.edit_text(f"‚ùå –ù–∞–≤–æ–¥—á–∏–∫ –∫–æ–Ω—Ç—É–∂–µ–Ω: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
@dp.message(lambda message: message.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def instruction(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        return
    instruction_text = """
    –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:
    *–í–∏–¥–µ–æ* - —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å –ª—é–±–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –≤ –Ω–∞–∏–ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ.
    *YouTube* - –°–∫–∞—á–∞—Ç—å —Å –Æ—Ç—É–±–∞ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.
    *Cookies* - –µ—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –∫–∞—á–∞–µ—Ç—Å—è (–æ—à–∏–±–∫–∞), —Ç–æ–≥–¥–∞:
    1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ [–ø–ª–∞–≥–∏–Ω](https://chromewebstore.google.com/detail/get-cookiestxt-locally/cclelndahbckbenkjhflpdbgdldlbecc) –≤ –±—Ä–∞—É–∑–µ—Ä.
    2. –ó–∞–π–¥–∏—Ç–µ –≤ —Å–≤–æ—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –Ω–∞ —Å–∞–π—Ç–µ –≤–∏–¥–µ–æ—Å–µ—Ä–≤–∏—Å–∞.
    3. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫—É–∫–∏ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Netscape.
    4. –í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É Cookies –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –±–æ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫—É–∫–∏ —Ñ–∞–π–ª –∏–∑ –ø—É–Ω–∫—Ç–∞ 3.
    5. –°–∫–∞—á–∏–≤–∞–π—Ç–µ –≤–∏–¥–µ–æ –ª—é–±–æ–π –∏–∑ –≤–∏–¥–µ–æ–∫–Ω–æ–ø–æ–∫. –î–ª—è –¥—Ä—É–≥–æ–≥–æ –≤–∏–¥–µ–æ—Å–µ—Ä–≤–∏—Å–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—É–Ω–∫—Ç—ã 2-3-4-5.
    """
    await message.answer(instruction_text, parse_mode="Markdown", disable_web_page_preview=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Cookies
@dp.message(lambda message: message.text == "Cookies")
async def cookies(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        return
    cookies_text = """
    –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫—É–∫–∏ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Netscape. 
    """
    await message.answer(cookies_text, parse_mode="Markdown", disable_web_page_preview=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–∫–∏ –í–∏–¥–µ–æ
@dp.message(lambda message: message.text == "–í–∏–¥–µ–æ")
async def handle_best_download(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        return
    user_modes[message.from_user.id] = 'best'
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ. –ú–æ–∂–Ω–æ —Å–∫–∞—á–∏–≤–∞—Ç—å —à–æ—Ä—Ç—Å—ã –∏–ª–∏ –≤–∏–¥–µ–æ —Å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–¥–µ–æ—Å–µ—Ä–≤–∏—Å–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–∫–∏ YouTube
@dp.message(lambda message: message.text == "YouTube")
async def request_video_url(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        return
    user_modes[message.from_user.id] = 'choose'
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ Youtube. –î–æ—Å—Ç—É–ø–µ–Ω –≤—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ URL
@dp.message(lambda message: re.match(r'https?://', message.text))
async def handle_url(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        return
    
    current_mode = user_modes.pop(message.from_user.id, 'choose')
    
    if current_mode == 'best':
        await download_media(message, message.text)
    else:
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
            'skip_download': True,
            'cookiefile': os.path.join(COOKIES_PATH, f"cookies_{message.from_user.id}.txt") if os.path.exists(os.path.join(COOKIES_PATH, f"cookies_{message.from_user.id}.txt")) else None,
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(message.text, download=False)
            formats = info.get('formats', [])
        
        buttons = []
        unique_qualities = set()
        for f in formats:
            if f.get('height') and f['height'] >= 480:
                quality = f"{f['height']}p"
                if quality not in unique_qualities:
                    unique_qualities.add(quality)
                    callback_data = json.dumps({"url": message.text, "quality": f['format_id']})
                    buttons.append(InlineKeyboardButton(text=quality, callback_data=callback_data))
        
        buttons.sort(key=lambda x: int(x.text[:-1]), reverse=True)
        keyboard = []
        for i in range(0, len(buttons), 2):
            row = buttons[i:i + 2]
            if len(row) == 1:
                row[0].text = f"üé¨ {row[0].text}"
            keyboard.append(row)
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
@dp.callback_query()
async def handle_callback_query(query: types.CallbackQuery):
    try:
        data = json.loads(query.data)
        url = data.get("url")
        quality = data.get("quality")

        if not url:
            await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ.")
            return

        await download_media(query.message, url, quality)
        await query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# Main function
async def main():
    try:
        logger.info("–ü–æ–µ—Ö–∞–ª–∏...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error: {e}")

if __name__ == "__main__":
    asyncio.run(main())
