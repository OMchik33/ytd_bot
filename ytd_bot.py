import os
import asyncio
import logging
import time  # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª—å time –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import yt_dlp
import re
from urllib.parse import quote
import hashlib
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "–í–°–¢–ê–í–¨–¢–ï–°–Æ–î–ê–¢–û–ö–ï–ù–ë–û–¢–ê"
ALLOWED_USERS = [–í–ê–®_–¢–ì_ID]
DOWNLOAD_PATH = "/download"
COOKIES_PATH = "/root/ytd/cookies"
DOWNLOAD_BASE_URL = "https://–í–ê–®–î–û–ú–ï–ù.ru/1234567yourrandom"

# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏
os.makedirs(DOWNLOAD_PATH, exist_ok=True)
os.makedirs(COOKIES_PATH, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è bot –∏ dispatcher
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Create keyboard
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì• Download Video")],
        [KeyboardButton(text="üîë Upload Cookies")]
    ],
    resize_keyboard=True,
    persistent=True
)

# Start command
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("–ö—Ç–æ –≤—ã? –Ø –≤–∞—Å –Ω–µ –∑–Ω–∞—é. –í—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –ø–æ –ø–∞—Ä—Ç–±–∏–ª–µ—Ç–∞–º!")
        return
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=main_keyboard)

# Handle cookies upload
@dp.message(lambda message: message.document and message.document.file_name.endswith('.txt'))
async def handle_cookie_file(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        return
    try:
        file = await bot.get_file(message.document.file_id)
        file_path = os.path.join(COOKIES_PATH, f"cookies_{message.from_user.id}.txt")
        await bot.download_file(file.file_path, file_path)
        await message.answer("‚úÖ –ö—É–∫–∏ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∑–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–æ—á–∫–∞ —Å –∫—É–∫–∏ —Ñ–∞–π–ª–æ–º: {e}")
        await message.answer("‚ùå –ö—É–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
async def download_media(message: types.Message, url: str, quality: str = None):
    status_message = await message.answer("üîÑ –°–∫–∞—á–∏–≤–∞—é...")
    try:
        # yt-dlp options
        ydl_opts = {
            'format': f'{quality}+bestaudio/best' if quality else 'bestvideo+bestaudio/best',
            'outtmpl': os.path.join(DOWNLOAD_PATH, '%(id)s.%(ext)s'),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –≤–∏–¥–µ–æ –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è
            'quiet': False,
            'nocheckcertificate': True,
            'geo_bypass': True,
            'retries': 5,
            'cookiefile': os.path.join(COOKIES_PATH, f"cookies_{message.from_user.id}.txt") if os.path.exists(os.path.join(COOKIES_PATH, f"cookies_{message.from_user.id}.txt")) else None,
            'http_headers': {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'
            }
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)

        title = info.get('title', 'video')
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        slug = hashlib.md5(title.encode('utf-8')).hexdigest()
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        timestamp = int(time.time())
        file_name = f"{slug}_{timestamp}.{info['ext']}"
        file_path = os.path.join(DOWNLOAD_PATH, file_name)

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
        temp_file_path = os.path.join(DOWNLOAD_PATH, f"{info['id']}.{info['ext']}")
        os.rename(temp_file_path, file_path)
        # Sanitize filename (—É–¥–∞–ª–µ–Ω–∏–µ —Å–º–∞–π–ª–∏–∫–æ–≤ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤)
        def sanitize_filename(title):
            # –†–∞–∑—Ä–µ—à–∞–µ–º –±—É–∫–≤—ã (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –∏ —Ä—É—Å—Å–∫–∏–µ), —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫—É, –∑–∞–ø—è—Ç—É—é, –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫, –¥–µ—Ñ–∏—Å, –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–±–µ–ª
            sanitized = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø0-9\.,!\- _]', '', title)
            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã)
            sanitized = re.sub(r'\s+', ' ', sanitized).strip()
            return sanitized
        original_name = f"{sanitize_filename(title)}.{info['ext']}"  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        download_url = f"{DOWNLOAD_BASE_URL}/{quote(file_name)}?filename={quote(original_name)}"

        await status_message.edit_text(f"‚úÖ –ì–û–¢–û–í–û!\n\n*–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏–∫–∞:* `{title}`\n\n–ù–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ 1 —á–∞—Å\n\n[–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è]({download_url})", parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error: {e}")
        await status_message.edit_text(f"‚ùå –ù–∞–≤–æ–¥—á–∏–∫ –∫–æ–Ω—Ç—É–∂–µ–Ω: {e}")

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
@dp.message(lambda message: message.text == "üì• Download Video")
async def request_video_url(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        return
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")

# Handle incoming URL
@dp.message(lambda message: re.match(r'https?://', message.text))
async def handle_url(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        return
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    ydl_opts = {
        'quiet': True,
        'no_warnings': True,
        'skip_download': True,
        'cookiefile': os.path.join(COOKIES_PATH, f"cookies_{message.from_user.id}.txt") if os.path.exists(os.path.join(COOKIES_PATH, f"cookies_{message.from_user.id}.txt")) else None,
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(message.text, download=False)
        formats = info.get('formats', [])
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏
    buttons = []
    unique_qualities = set()
    for f in formats:
        if f.get('height') and f['height'] >= 480:  # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∏–∂–µ 480p
            quality = f"{f['height']}p"
            if quality not in unique_qualities:
                unique_qualities.add(quality)
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –≤ callback_data
                callback_data = json.dumps({"url": message.text, "quality": f['format_id']})
                buttons.append(InlineKeyboardButton(text=quality, callback_data=callback_data))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    buttons.sort(key=lambda x: int(x.text[:-1]), reverse=True)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞–∂–¥–æ–π
    keyboard = []
    for i in range(0, len(buttons), 2):
        row = buttons[i:i + 2]
        # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞, –¥–µ–ª–∞–µ–º –µ—ë –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
        if len(row) == 1:
            row[0].text = f"üé¨ {row[0].text}"  # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        keyboard.append(row)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
@dp.callback_query()
async def handle_callback_query(query: types.CallbackQuery):
    try:
        data = json.loads(query.data)
        url = data.get("url")
        quality = data.get("quality")

        if not url:
            await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ.")
            return

        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        await download_media(query.message, url, quality)
        await query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# Main function
async def main():
    try:
        logger.info("–ü–æ–µ—Ö–∞–ª–∏...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error: {e}")

if __name__ == "__main__":
    asyncio.run(main())
